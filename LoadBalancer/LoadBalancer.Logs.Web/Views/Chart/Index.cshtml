@using System.ComponentModel.DataAnnotations;

@model ChartViewModel
@{
    var colors = new List<string>
{
        "rgba(244, 65, 65)",
        "rgb(244, 65, 65)",
        "rgb(244, 187, 65)",
        "rgb(223, 65, 244)",
        "rgb(244, 65, 127)",
        "rgb(73, 73, 73)",
        "rgb(219, 15, 15)",
        "rgb(86, 122, 8)",
        "rgb(8, 17, 119)",
        "rgb(8, 119, 117)",
        "rgb(8, 119, 19)"
    };
    string XLabels = string.Empty;

    if (Model.ChartType == ChartType.Time)
    {
        XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model.ChartDataModels.Select(x => x.FromDateTime.ToShortTimeString()).ToList());
    }
    else if (Model.ChartType == ChartType.Date)
    {
        XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model.ChartDataModels.Select(x => x.FromDateTime.ToShortDateString()).ToList());
    }
    else if (Model.ChartType == ChartType.Hour)
    {
        XLabels = Newtonsoft.Json.JsonConvert.SerializeObject(Model.ChartDataModels.Select(x => x.FromDateTime.Hour).ToList());
    }

    var YValues = new List<string>();
    var ChartNames = new List<string>();
    foreach (var prop in typeof(Metrics).GetProperties())
    {
        if (prop.Name.ToLower().Contains("time"))
        {
            continue;
        }
        var attrib = (DisplayAttribute)Attribute.GetCustomAttribute(prop, typeof(DisplayAttribute));
        ChartNames.Add(attrib.Name);
        var vals = Newtonsoft.Json.JsonConvert.SerializeObject(Model.ChartDataModels.Select(x => x.GetType().GetProperty(prop.Name).GetValue(x, null)).ToList());
        YValues.Add(vals);
    }
    //var YValues = Newtonsoft.Json.JsonConvert.SerializeObject(Model.ChartDataModels.Select(x => x.RequestCount).ToList());
    ViewData["Title"] = "Chart";
}

<h1>Charts</h1>

<div>

    @Html.ActionLink("Last 1h", "GetLastHours", new { hours = 1 }, new { @class = "btn btn-primary btn-xs" })
    @Html.ActionLink("Last 24h", "GetLastHours", new { hours = 24 }, new { @class = "btn btn-primary btn-xs" })
    @Html.ActionLink("Last 7 days", "GetLastDays", new { days = 7 }, new { @class = "btn btn-primary btn-xs" })
    @Html.ActionLink("Last 30 days", "GetLastDays", new { days = 30 }, new { @class = "btn btn-primary btn-xs" })

    <dl class="row">
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.FromTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.FromTime)
        </dd>
        <dt class="col-sm-4">
            @Html.DisplayNameFor(model => model.ToTime)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => model.ToTime)
        </dd>
    </dl>
    <hr />
    @for (int i = 0; i < YValues.Count(); i++)
    {
        <div class="chart-container">
            <canvas id="@i" style="width:100%; height:500px"></canvas>
        </div>
    }
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.2/Chart.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>

@for (int i = 0; i < YValues.Count(); i++)
{
    <script type="text/javascript">

        $(function () {
                    var chartName = "@i";
                    var ctx = document.getElementById(chartName).getContext('2d');
                    var data = {
                labels: @Html.Raw(XLabels),
                datasets: [{
                    label: "@ChartNames[i]",
                    backgroundColor: '@colors[i]',
                    borderColor: '@colors[i]',
                    hoverBorderColor : "#000",
                    borderWidth: 2,
                    data: @Html.Raw(YValues[i])
    }]
            };

            var options = {
                maintainAspectRatio: false,
                scales: {
                yAxes: [{
                    ticks: {
                    min: 0,
                            beginAtZero: true
                        },
                        gridLines: {
                        display: true,
                            color: "rgba(255,99,164,0.2)"
                        }
                    }],
                    xAxes: [{
                    ticks: {
                            beginAtZero: true
                        },
                        gridLines: {
                        display: false
                        }
                    }]
                }
            };
            if ("@ChartNames[i].ToLower().Contains("percent").ToString()" == "True") {
                options.scales.yAxes[0].ticks.max = 100;
            }            
            Chart.defaults.global.defaultFontColor = 'black';
        Chart.defaults.global.defaultFontSize = 16;
            var myChart = new  Chart(ctx, {

                     options: options,
                     data: data,
                     type:'bar'

            });
        });
    </script>
}
